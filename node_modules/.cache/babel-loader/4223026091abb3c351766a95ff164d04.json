{"ast":null,"code":"import _defineProperty from \"/home/ishav/Documents/Altcampus/redux/practice-reduxcounter/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { INCREMENT, DECREMENT, RESET } from \"../types\";\nconst initial_state = {\n  number: 198,\n  step: 5\n};\nexport default function reducer(state = initial_state, action) {\n  console.log(state, action);\n\n  switch (action.type) {\n    case INCREMENT:\n      if (state.number >= 200) {\n        return alert(\"exceed number\");\n      } else {\n        return _objectSpread({}, state, {\n          number: state.number + 1\n        });\n      }\n\n    case DECREMENT:\n      return _objectSpread({}, state, {\n        number: state.number - 1\n      });\n\n    case RESET:\n      return _objectSpread({}, state, {\n        number: 0\n      });\n\n    default:\n      return state.number;\n  }\n}","map":{"version":3,"sources":["/home/ishav/Documents/Altcampus/redux/practice-reduxcounter/src/state/Counter.reducer.js"],"names":["INCREMENT","DECREMENT","RESET","initial_state","number","step","reducer","state","action","console","log","type","alert"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,SAApB,EAA+BC,KAA/B,QAA4C,UAA5C;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,MAAM,EAAE,GADY;AAEpBC,EAAAA,IAAI,EAAE;AAFc,CAAtB;AAKA,eAAe,SAASC,OAAT,CAAiBC,KAAK,GAAGJ,aAAzB,EAAwCK,MAAxC,EAAgD;AAC7DC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAmBC,MAAnB;;AAEA,UAAQA,MAAM,CAACG,IAAf;AACE,SAAKX,SAAL;AACE,UAAIO,KAAK,CAACH,MAAN,IAAgB,GAApB,EAAyB;AACvB,eAAOQ,KAAK,CAAC,eAAD,CAAZ;AACD,OAFD,MAEO;AACL,iCACKL,KADL;AAEEH,UAAAA,MAAM,EAAEG,KAAK,CAACH,MAAN,GAAe;AAFzB;AAID;;AACH,SAAKH,SAAL;AACE,+BACKM,KADL;AAEEH,QAAAA,MAAM,EAAEG,KAAK,CAACH,MAAN,GAAe;AAFzB;;AAKF,SAAKF,KAAL;AACE,+BACKK,KADL;AAEEH,QAAAA,MAAM,EAAE;AAFV;;AAIF;AACE,aAAOG,KAAK,CAACH,MAAb;AAtBJ;AAwBD","sourcesContent":["import { INCREMENT, DECREMENT, RESET } from \"../types\";\n\nconst initial_state = {\n  number: 198,\n  step: 5\n};\n\nexport default function reducer(state = initial_state, action) {\n  console.log(state, action);\n\n  switch (action.type) {\n    case INCREMENT:\n      if (state.number >= 200) {\n        return alert(\"exceed number\");\n      } else {\n        return {\n          ...state,\n          number: state.number + 1\n        };\n      }\n    case DECREMENT:\n      return {\n        ...state,\n        number: state.number - 1\n      };\n\n    case RESET:\n      return {\n        ...state,\n        number: 0\n      };\n    default:\n      return state.number;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}