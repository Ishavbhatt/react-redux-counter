{"ast":null,"code":"import _objectSpread from \"/home/ishav/Documents/Altcampus/redux/react-redux-counter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { INCREMENT, DECREMENT, RESET, STEP, MAX } from \"../types\";\nconst initial_state = {\n  number: 0,\n  step: 1,\n  max: 1000\n};\nexport default function reducer(state = initial_state, action) {\n  console.log(state, action);\n\n  switch (action.type) {\n    case INCREMENT:\n      if (state.number < state.max) {\n        return _objectSpread({}, state, {\n          number: state.number + state.step\n        });\n      } else {\n        alert(`can't exceed more than ${state.max}`);\n        return state;\n      }\n\n    case DECREMENT:\n      if (state.number > 0) {\n        return _objectSpread({}, state, {\n          number: state.number - state.step\n        });\n      } else {\n        alert(\"why u go below 0\");\n        return state;\n      }\n\n    case RESET:\n      return _objectSpread({}, state, {\n        number: 0\n      });\n\n    case STEP:\n      return _objectSpread({}, state, {\n        step: action.payload\n      });\n\n    case MAX:\n      return _objectSpread({}, state, {\n        max: action.payload\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/ishav/Documents/Altcampus/redux/react-redux-counter/src/state/Counter.reducer.js"],"names":["INCREMENT","DECREMENT","RESET","STEP","MAX","initial_state","number","step","max","reducer","state","action","console","log","type","alert","payload"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,SAApB,EAA+BC,KAA/B,EAAsCC,IAAtC,EAA4CC,GAA5C,QAAuD,UAAvD;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,MAAM,EAAE,CADY;AAEpBC,EAAAA,IAAI,EAAE,CAFc;AAGpBC,EAAAA,GAAG,EAAE;AAHe,CAAtB;AAMA,eAAe,SAASC,OAAT,CAAiBC,KAAK,GAAGL,aAAzB,EAAwCM,MAAxC,EAAgD;AAC7DC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAmBC,MAAnB;;AAEA,UAAQA,MAAM,CAACG,IAAf;AACE,SAAKd,SAAL;AACE,UAAIU,KAAK,CAACJ,MAAN,GAAeI,KAAK,CAACF,GAAzB,EAA8B;AAC5B,iCAAYE,KAAZ;AAAmBJ,UAAAA,MAAM,EAAEI,KAAK,CAACJ,MAAN,GAAeI,KAAK,CAACH;AAAhD;AACD,OAFD,MAEO;AACLQ,QAAAA,KAAK,CAAE,0BAAyBL,KAAK,CAACF,GAAI,EAArC,CAAL;AACA,eAAOE,KAAP;AACD;;AAEH,SAAKT,SAAL;AACE,UAAIS,KAAK,CAACJ,MAAN,GAAe,CAAnB,EAAsB;AACpB,iCAAYI,KAAZ;AAAmBJ,UAAAA,MAAM,EAAEI,KAAK,CAACJ,MAAN,GAAeI,KAAK,CAACH;AAAhD;AACD,OAFD,MAEO;AACLQ,QAAAA,KAAK,CAAC,kBAAD,CAAL;AACA,eAAOL,KAAP;AACD;;AACH,SAAKR,KAAL;AACE,+BACKQ,KADL;AAEEJ,QAAAA,MAAM,EAAE;AAFV;;AAIF,SAAKH,IAAL;AACE,+BAAYO,KAAZ;AAAmBH,QAAAA,IAAI,EAAEI,MAAM,CAACK;AAAhC;;AACF,SAAKZ,GAAL;AACE,+BAAYM,KAAZ;AAAmBF,QAAAA,GAAG,EAAEG,MAAM,CAACK;AAA/B;;AACF;AACE,aAAON,KAAP;AA1BJ;AA4BD","sourcesContent":["import { INCREMENT, DECREMENT, RESET, STEP, MAX } from \"../types\";\n\nconst initial_state = {\n  number: 0,\n  step: 1,\n  max: 1000\n};\n\nexport default function reducer(state = initial_state, action) {\n  console.log(state, action);\n\n  switch (action.type) {\n    case INCREMENT:\n      if (state.number < state.max) {\n        return { ...state, number: state.number + state.step };\n      } else {\n        alert(`can't exceed more than ${state.max}`);\n        return state;\n      }\n\n    case DECREMENT:\n      if (state.number > 0) {\n        return { ...state, number: state.number - state.step };\n      } else {\n        alert(\"why u go below 0\");\n        return state;\n      }\n    case RESET:\n      return {\n        ...state,\n        number: 0\n      };\n    case STEP:\n      return { ...state, step: action.payload };\n    case MAX:\n      return { ...state, max: action.payload };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}