{"ast":null,"code":"import _defineProperty from \"/home/ishav/Documents/Altcampus/redux/practice-reduxcounter/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { INCREMENT, DECREMENT, RESET } from \"../types\";\nconst initial_state = {\n  number: 0\n};\nexport default function reducer(state = initial_state, action) {\n  console.log(state, action);\n\n  switch (action.type) {\n    case \"Increment\":\n      return _objectSpread({}, state, {\n        number: state.number + 1\n      });\n\n    case \"Decrement\":\n      return _objectSpread({}, state, {\n        number: state.number - 1\n      });\n\n    case \"Reset\":\n      return _objectSpread({}, state, {\n        number: 0\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/ishav/Documents/Altcampus/redux/practice-reduxcounter/src/state/Counter.reducer.js"],"names":["INCREMENT","DECREMENT","RESET","initial_state","number","reducer","state","action","console","log","type"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,SAApB,EAA+BC,KAA/B,QAA4C,UAA5C;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,MAAM,EAAE;AADY,CAAtB;AAIA,eAAe,SAASC,OAAT,CAAiBC,KAAK,GAAGH,aAAzB,EAAwCI,MAAxC,EAAgD;AAC7DC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAmBC,MAAnB;;AAEA,UAAQA,MAAM,CAACG,IAAf;AACE,SAAK,WAAL;AACE,+BACKJ,KADL;AAEEF,QAAAA,MAAM,EAAEE,KAAK,CAACF,MAAN,GAAe;AAFzB;;AAKF,SAAK,WAAL;AACE,+BACKE,KADL;AAEEF,QAAAA,MAAM,EAAEE,KAAK,CAACF,MAAN,GAAe;AAFzB;;AAKF,SAAK,OAAL;AACE,+BACKE,KADL;AAEEF,QAAAA,MAAM,EAAE;AAFV;;AAIF;AACE,aAAOE,KAAP;AAnBJ;AAqBD","sourcesContent":["import { INCREMENT, DECREMENT, RESET } from \"../types\";\n\nconst initial_state = {\n  number: 0\n};\n\nexport default function reducer(state = initial_state, action) {\n  console.log(state, action);\n\n  switch (action.type) {\n    case \"Increment\":\n      return {\n        ...state,\n        number: state.number + 1\n      };\n\n    case \"Decrement\":\n      return {\n        ...state,\n        number: state.number - 1\n      };\n\n    case \"Reset\":\n      return {\n        ...state,\n        number: 0\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}